package nachos.userprog;

import nachos.machine.*;
import nachos.threads.*;
import nachos.userprog.*;

import java.io.EOFException;

import java.util.ArrayList;
import java.util.LinkedList;   
import java.util.HashMap;
import java.util.List;


/**
 * Encapsulates the state of a user process that is not contained in its
 * user thread (or threads). This includes its address translation state, a
 * file table, and information about the program being executed.
 *
 * <p>
 * This class is extended by other classes to support additional functionality
 * (such as additional syscalls).
 *
 * @see	nachos.vm.VMProcess
 * @see	nachos.network.NetProcess
 */
public class UserProcess {
	/**
	 * Allocate a new process.
	 */
	public UserProcess() {
	    int numPhysPages = Machine.processor().getNumPhysPages();   //presumably have to change to be an appropriate numbah  DAC
	    pageTable = new TranslationEntry[numPhysPages];             //check out what TranslationEntry does  DAC
	    for (int i=0; i<numPhysPages; i++)
		pageTable[i] = new TranslationEntry(i,i, true,false,false,false);   //this is doing the 1-1 mapping methinks  DAC
         	UserKernel.numActiveProcesses++;  //add to active processes
		//initialize file_descriptors 
		//stdin
		file_descriptors[0] = UserKernel.console.openForReading();  //stdin
		Lib.assertTrue(file_descriptors[0]!=null, "StdIn does not exist\n");    //DAC DEBUG
		//stdout
		file_descriptors[1] = UserKernel.console.openForWriting();  //stdout
		Lib.assertTrue(file_descriptors[1]!=null, "StdOut does not exist\n");   //DAC DEBUG
		testFileSystem();

	}

	/**
	 * Allocate and return a new process of the correct class. The class name
	 * is specified by the <tt>nachos.conf</tt> key
	 * <tt>Kernel.processClassName</tt>.
	 *
	 * @return	a new process of the correct class.
	 */
	public static UserProcess newUserProcess() {
		return (UserProcess)Lib.constructObject(Machine.getProcessClassName());
	}

	/**
	 * Execute the specified program with the specified arguments. Attempts to
	 * load the program, and then forks a thread to run it.
	 *
	 * @param	name	the name of the file containing the executable.
	 * @param	args	the arguments to pass to the executable.
	 * @return	<tt>true</tt> if the program was successfully executed.
	 */
	public boolean execute(String name, String[] args) {
		if (!load(name, args))
			return false;

		myThread = new UThread(this).setName(name);
		myThread.fork();

		return true;
	}

	/**
	 * Save the state of this process in preparation for a context switch.
	 * Called by <tt>UThread.saveState()</tt>.
	 */
	public void saveState() {
	}

	/**
	 * Restore the state of this process after a context switch. Called by
	 * <tt>UThread.restoreState()</tt>.
	 */
	public void restoreState() {
		Machine.processor().setPageTable(pageTable);
	}

	/**
	 * Read a null-terminated string from this process's virtual memory. Read
	 * at most <tt>maxLength + 1</tt> bytes from the specified address, search
	 * for the null terminator, and convert it to a <tt>java.lang.String</tt>,
	 * without including the null terminator. If no null terminator is found,
	 * returns <tt>null</tt>.
	 *
	 * @param	vaddr	the starting virtual address of the null-terminated
	 *			string.
	 * @param	maxLength	the maximum number of characters in the string,
	 *				not including the null terminator.
	 * @return	the string read, or <tt>null</tt> if no null terminator was
	 *		found.
	 */
	public String readVirtualMemoryString(int vaddr, int maxLength) {

		Lib.assertTrue(maxLength >= 0);

		byte[] bytes = new byte[maxLength+1];

		int bytesRead = readVirtualMemory(vaddr, bytes);

		for (int length=0; length<bytesRead; length++) {
			if (bytes[length] == 0)
				return new String(bytes, 0, length);
		}

		return null;
	}

	/**
	 * Transfer data from this process's virtual memory to all of the specified
	 * array. Same as <tt>readVirtualMemory(vaddr, data, 0, data.length)</tt>.
	 *
	 * @param	vaddr	the first byte of virtual memory to read.
	 * @param	data	the array where the data will be stored.
	 * @return	the number of bytes successfully transferred.
	 */
	public int readVirtualMemory(int vaddr, byte[] data) {
		return readVirtualMemory(vaddr, data, 0, data.length);
	}

	/**
	 * Transfer data from this process's virtual memory to the specified array.
	 * This method handles address translation details. This method must
	 * <i>not</i> destroy the current process if an error occurs, but instead
	 * should return the number of bytes successfully copied (or zero if no
	 * data could be copied).
	 *
	 * @param	vaddr	the first byte of virtual memory to read.
	 * @param	data	the array where the data will be stored.
	 * @param	offset	the first byte to write in the array.
	 * @param	length	the number of bytes to transfer from virtual memory to
	 *			the array.
	 * @return	the number of bytes successfully transferred.
	 */
	public int readVirtualMemory(int vaddr, byte[] data, int offset,
			int length) {
		Lib.assertTrue(offset >= 0 && length >= 0 && offset+length <= data.length);
		byte[] memory = Machine.processor().getMemory();

		if (vaddr < 0 || vaddr >= memory.length)
			return 0;
			
	int byteNum = 0;
	do{
	    int pageIndex = Processor.pageFromAddress(vaddr + byteNum);        //get the page the process thinks it is on
	    if (pageIndex < 0 || pageIndex >= pageTable.length) return 0;   
	    int pageOffset = Processor.offsetFromAddress(vaddr+ byteNum);      //get offset from page base of this vitual address
	    int bytesLeftInPage = pageSize - pageOffset;                       //number of bytes you can still write on this page
	    int bytesToRead = Math.min(bytesLeftInPage, length - byteNum);     //see how many bytes you can read from this page before page changes
	    int physicalAddr =  pageTable[pageIndex].ppn*pageSize + pageOffset;//get corresponding physical address 
		System.arraycopy(memory, physicalAddr, data, offset + byteNum, bytesToRead);
		byteNum += bytesToRead;
                


	}while(byteNum < length);
	
	
	
	return byteNum;

    }
	

	/*	int amount = 0;

		while (length > 0)
		{
			int virtualPageNumber = Processor.pageFromAddress(vaddr);
			int pageOffset = Processor.offsetFromAddress(vaddr);

			//either the length of we are passed in or until the end of the page
			int read = Math.min(length, Processor.pageSize-pageOffset);

			//gets physical page and error checks
			int physicalPage = getPhysicalPage(virtualPageNumber,false);
			if (physicalPage == -1)
			{
				return 0;
			}

			//read from memory and transfer to the data array
			System.arraycopy(memory, physicalPage*Processor.pageSize + pageOffset, data, offset, read); 
			// physical page * page size and read

			//the number of bytes left to transfer from virtual memory to the array.
			length = length - read; 
			//keeping track how much btyes already read
			amount = amount + read; 
			//the first byte of virtual memory to read + the number of btyes read gives you next chuck to read
			vaddr = vaddr + read;

			offset = offset + read;  

		}

		return amount;


	}*/
	public int getPhysicalPage(int virtualPage, boolean write)
	{
		try
		{
			if (virtualPage < 0 || virtualPage >= pageTable.length)
			{
				return -1;
			}

			TranslationEntry entry = pageTable[virtualPage];
			//checks virtual page number not equal to virtual page passed in, or does not exist
			if (entry.vpn != virtualPage || !entry.valid)
			{
				return -1;
			}

			if (write==true)
			{
				//checks if trying to write in a read-only entry
				if(entry.readOnly)
				{
					return -1;
				}
				else
					//  This flag is set to true every time the page is written by  user program. 
					entry.dirty = true;
			}
			//This flag is set to <tt>true</tt> every time the page is read or written by a user program. 
			entry.used = true;  
			//return physical page number
			return entry.ppn;
		}

		catch (Exception e)
		{
			return -1;
		}       

	}



	/**
	 * Transfer all data from the specified array to this process's virtual
	 * memory.
	 * Same as <tt>writeVirtualMemory(vaddr, data, 0, data.length)</tt>.
	 *
	 * @param	vaddr	the first byte of virtual memory to write.
	 * @param	data	the array containing the data to transfer.
	 * @return	the number of bytes successfully transferred.
	 */
	public int writeVirtualMemory(int vaddr, byte[] data) {
		return writeVirtualMemory(vaddr, data, 0, data.length);
	}

	/**
	 * Transfer data from the specified array to this process's virtual memory.
	 * This method handles address translation details. This method must
	 * <i>not</i> destroy the current process if an error occurs, but instead
	 * should return the number of bytes successfully copied (or zero if no
	 * data could be copied).
	 *
	 * @param	vaddr	the first byte of virtual memory to write.
	 * @param	data	the array containing the data to transfer.
	 * @param	offset	the first byte to transfer from the array.
	 * @param	length	the number of bytes to transfer from the array to
	 *			virtual memory.
	 * @return	the number of bytes successfully transferred.
	 */
	public int writeVirtualMemory(int vaddr, byte[] data, int offset,
			int length) {
		Lib.assertTrue(offset >= 0 && length >= 0 && offset+length <= data.length);

		byte[] memory = Machine.processor().getMemory();

		if (vaddr < 0 || vaddr >= memory.length) return 0;
		//amount
		int numberofBytesreturn = 0;
		//length	the number of bytes to transfer from the array to virtual memory.
		while (numberofBytesreturn < length)
		{
			//get Page Frame number 
			int virtualPageIndex = Processor.pageFromAddress(vaddr);
			//checks and return 0 bytes can be read
			if (virtualPageIndex < 0 || virtualPageIndex >= pageTable.length || pageTable[virtualPageIndex].readOnly) 
			{return 0;}

			int pageOffset = Processor.offsetFromAddress(vaddr);

			int bytesleftinPage = Processor.pageSize-pageOffset; 

			//int bytesToWrite = Math.min(bytesleftinPage, length - numberofBytesreturn, length);
			//Math min finds the minium, smallest number 
			int bytestowrite = Math.min(length, bytesleftinPage);

			//get physical page method to do and error checks
			int physicalPage = getPhysicalPage(virtualPageIndex,true);
			if(physicalPage == -1)
			{
				return 0;
			}

			//int physicalAddr =  pageTable[pageIndex].ppn*pageSize + pageOffset;

			//write to virtual memory
			System.arraycopy(data, offset, memory, physicalPage*Processor.pageSize + pageOffset, bytestowrite); 

			length = length - bytestowrite;

			numberofBytesreturn = numberofBytesreturn + bytestowrite;

			vaddr = vaddr + bytestowrite;

			offset = offset + bytestowrite;            

		}
		//return the number of bytes successfully transfered. 
		return numberofBytesreturn;

	} 	


	/**
	 * Load the executable with the specified name into this process, and
	 * prepare to pass it the specified arguments. Opens the executable, reads
	 * its header information, and copies sections and arguments into this
	 * process's virtual memory.
	 *
	 * @param	name	the name of the file containing the executable.
	 * @param	args	the arguments to pass to the executable.
	 * @return	<tt>true</tt> if the executable was successfully loaded.
	 */
	private boolean load(String name, String[] args) {
		Lib.debug(dbgProcess, "UserProcess.load(\"" + name + "\")");

		OpenFile executable = ThreadedKernel.fileSystem.open(name, false);
		if (executable == null) {
			Lib.debug(dbgProcess, "\topen failed");
			return false;
		}

		try {
			coff = new Coff(executable);
		}
		catch (EOFException e) {
			executable.close();
			Lib.debug(dbgProcess, "\tcoff load failed");
			return false;
		}

		// make sure the sections are contiguous and start at page 0
		numPages = 0;
		for (int s=0; s<coff.getNumSections(); s++) {
			CoffSection section = coff.getSection(s);
			if (section.getFirstVPN() != numPages) {
				coff.close();
				Lib.debug(dbgProcess, "\tfragmented executable");
				return false;
			}
			numPages += section.getLength();     //gets total pages needed not including stack and args
		}

		// make sure the argv array will fit in one page
		byte[][] argv = new byte[args.length][];
		int argsSize = 0;
		for (int i=0; i<args.length; i++) {
			argv[i] = args[i].getBytes();
			// 4 bytes for argv[] pointer; then string plus one for null byte
			argsSize += 4 + argv[i].length + 1;
		}
		if (argsSize > pageSize) {
			coff.close();
			Lib.debug(dbgProcess, "\targuments too long");
			return false;
		}

		// program counter initially points at the program entry point
		initialPC = coff.getEntryPoint();	

		// next comes the stack-8 pages ; stack pointer initially points to top of it
		numPages += stackPages;
		initialSP = numPages*pageSize;

		// and finally reserve 1 page for arguments
		numPages++;

		if (!loadSections())
			return false;

		// store arguments in last page
		int entryOffset = (numPages-1)*pageSize;
		int stringOffset = entryOffset + args.length*4;

		this.argc = args.length;
		this.argv = entryOffset;

		for (int i=0; i<argv.length; i++) {
			byte[] stringOffsetBytes = Lib.bytesFromInt(stringOffset);
			Lib.assertTrue(writeVirtualMemory(entryOffset,stringOffsetBytes) == 4);
			entryOffset += 4;
			Lib.assertTrue(writeVirtualMemory(stringOffset, argv[i]) ==
				argv[i].length);
			stringOffset += argv[i].length;
			Lib.assertTrue(writeVirtualMemory(stringOffset,new byte[] { 0 }) == 1);
			stringOffset += 1;
		}

		return true;
	}

	/**
	 * Allocates memory for this process, and loads the COFF sections into
	 * memory. If this returns successfully, the process will definitely be
	 * run (this is the last step in process initialization that can fail).
	 *
	 * @return	<tt>true</tt> if the sections were successfully loaded.
	 */
	protected boolean loadSections() {

         	UserKernel.pageLock.acquire();   //CV?
		if (numPages > Machine.processor().getNumPhysPages()) {
			coff.close();
			Lib.debug(dbgProcess, "\tinsufficient physical memory");
			return false;
		}
		if (numPages > UserKernel.freePagesPool.size()) {
			coff.close();
			Lib.debug(dbgProcess, "\tinsufficient physical memory");
			UserKernel.pageLock.release();
			return false;
		}

		//allocate pageTable with appropriate amount of paged initialized in load
		pageTable = new TranslationEntry[numPages];

		//i = this processes virtual page number and each will have a physical page (page)
		for (int i=0; i < numPages; i++)
		{
			int page = UserKernel.freePagesPool.removeFirst();
			pageTable[i] = new TranslationEntry(i,page, true,false,false,false);
		}
		UserKernel.pageLock.release();


		// load sections
		for (int s=0; s<coff.getNumSections(); s++) {
			CoffSection section = coff.getSection(s);

			Lib.debug(dbgProcess, "\tinitializing " + section.getName()
					+ " section (" + section.getLength() + " pages)");

			for (int i=0; i<section.getLength(); i++) {
				int vpn = section.getFirstVPN()+i;

				//int ppn = UserKernel.availablePages.remove().ppn;
				pageTable[vpn].readOnly = section.isReadOnly();

				//section.loadPage(i, getPhysicalPage(vpn,false));
				//ppn = physical page number
				section.loadPage(i, pageTable[vpn].ppn);

			}
		}

		return true;
	}

	/**
	 * Release any resources allocated by <tt>loadSections()</tt>.
	 */
	protected void unloadSections() {
		//traverse though processes virtual pages and free up the physical page associated with it
		UserKernel.pageLock.acquire();

		for (int i = 0; i < pageTable.length; i++ )
		{
			UserKernel.freePagesPool.add(pageTable[i].ppn);
			pageTable[i] = null;
		}
		UserKernel.pageLock.release();

	}  


	/**
	 * Initialize the processor's registers in preparation for running the
	 * program loaded into this process. Set the PC register to point at the
	 * start function, set the stack pointer register to point at the top of
	 * the stack, set the A0 and A1 registers to argc and argv, respectively,
	 * and initialize all other registers to 0.
	 */
	public void initRegisters() {
		Processor processor = Machine.processor();

		// by default, everything's 0
		for (int i=0; i<processor.numUserRegisters; i++)
			processor.writeRegister(i, 0);

		// initialize PC and SP according
		processor.writeRegister(Processor.regPC, initialPC);
		processor.writeRegister(Processor.regSP, initialSP);

		// initialize the first two argument registers to argc and argv
		processor.writeRegister(Processor.regA0, argc);
		processor.writeRegister(Processor.regA1, argv);
	}


	/*return a free (null) file descriptor from file_descriptors[]
	 */
	private int getNextFileDescriptor(){
		//modify this to increase efficiency (move to next-file descriptor rather than starting at 0 each time)
		for(int i=0; i<NUM_FD;i++){         //instead of hard-coding 16, maintain as private 'const'
			if(file_descriptors[i]==null){
				return i;
			}
		}
		return -1;   // there are no free fds (return -1)
	}
    private int searchNameFileDescriptor(String name){
	//modify this to increase efficiency (move to next-file descriptor rather than starting at 0 each time)
        for(int i=0; i<NUM_FD;i++){         //instead of hard-coding 16, maintain as private 'const'
            if(file_descriptors[i]!=null){  
         	    if(file_descriptors[i].getName()==name){
		        return i;
	             }
            }
        }
        return -1;   // there are no free fds (return -1)
    }	
	private int handleCreate(int filename_address) {
		//make sure there is an available file descriptor
		int fd = getNextFileDescriptor();
		if(fd==-1){
			return -1;
		} 
		//sanitize memory address?  BULLET PROOF
		//read string from memory into buffer
		String filename = readVirtualMemoryString(filename_address, 256);  //DAC TO DO: make sure maxlength is appropriate(might need to be less than 256)
		//sanitize string BULLET PROOF
		//if null or empty return -1
		if (filename == null || filename.length() == 0) 
		{
		return -1;
		}
		if(fd>-1 && fd<16)
		{
			//create OpenFile to hold about to be created file 
			//OpenFileWithPosition file = new OpenFileWithPosition(ThreadedKernel.filesystem, filename); // (what is the difference between this and the line below? DAC ???)
			OpenFile file = ThreadedKernel.fileSystem.open(filename, true);
			//put open file into array of file descripters
			file_descriptors[fd]=file;
			if (file_descriptors[fd]==null) 
			{
			return -1;
			}
			// return file descriptor
			return fd;           
		}
		else return -1;
	}
	/**
	 * Handle the "open()" system call
	 *  param: 
	 *   int filename_address: the address in virtual memory of the filename to open/create
	 */
	private int handleOpen(int filename_address) {
		//make sure there is an available file descriptor
		//if there is no available file descriptor, should we put the thread to sleep?  What if there is only one thread in the process DAC ???
		int fd = getNextFileDescriptor();
		if(fd==-1){
			return -1;
		} 
		//sanitize memory address?  BULLET PROOF
		//read string from memory into buffer
		String filename = readVirtualMemoryString(filename_address, 256);  //DAC TO DO: make sure maxlength is appropriate(might need to be less than 256)
		//sanitize string BULLET PROOF
		//create OpenFile to hold about to be created file 
		//        OpenFileWithPosition file = new OpenFileWithPosition(ThreadedKernel.filesystem, filename); // (what is the difference between this and the line below? DAC ???)
		OpenFile file = ThreadedKernel.fileSystem.open(filename, false);
		if(file==null){
			return -1;
		}
		//put open file into array of file descripters
		file_descriptors[fd]=file;
		if (file_descriptors[fd]==null) {return -1;}
		// return file descriptor
		return fd;           
	}


	// a0 = fd, read location, a1=memory to store to, a2= size
	// returns number of bytes read

	private int handleRead(int fd, int buffer_address, int num_bytes) {

		//sanitize check fd
		if(fd<0||fd>15||file_descriptors[fd]==null){
			return -1;
		}

		//open file at filedescriptor
		OpenFile opened = this.file_descriptors[fd];      
		if (opened == null)
		{
			return -1;
		}
		//sanitize buffer_address DAC BULLET PROOF
		// check memory location on where to store a1
		if ( buffer_address < 0 || buffer_address > Machine.processor().getNumPhysPages() * Processor.pageSize)
		{
			return -1;
		}

	//sanitize buffer_address DAC BULLET PROOF
        //make sure num_bytes is acceptable (doesn't cause read too far, positive, etc) DAC BULLET PROOF
        int offset=0;     //offset to read into buffer
        byte[] buffer= new byte[96];
        int toRead=0;
        int remaining_bytes=num_bytes;
        int total_read=0;
        int read=0;
        int written=0;		
		while(remaining_bytes>0)
		{
	toRead=Math.min(96,remaining_bytes);
                System.out.print("toRead Amount:\t"+toRead+"\n");
                System.out.print("Reading into readBuffer "+toRead+" bytes\n");
                read=file_descriptors[fd].read(buffer, 0, toRead);
                System.out.print("After read in OpenFile.read():\t" + read + "bytes read\n");   //DAC DEBUG
                if(read<0){    //something went wrong
                    System.out.print("read less than 0, something fishy up in hanldeRead\n");
		    return -1;
                }
                System.out.print("Attempting to write read material to virtual address\n");
                written=writeVirtualMemory(buffer_address, buffer, 0, read);
                if(read!=written){        
                    System.out.print("Something wrong with writeVirtualMemory in handleRead()\n");
		    return -1;            //something went wrong?
                } 
                total_read+=read;
                remaining_bytes-=read;       
                buffer_address+=read;
                if(read<toRead){
		    break;   //break out, no more to read     
		}
	}
        System.out.print("Total Read from Read:\t"+total_read+"\n");
        return total_read;          //return the total number of bytes read
                                    //better make sure all corne cases are dealt with  BULLET PROOF DAC  
    }
        

	private int handleWrite(int fd, int buffer_address, int num_bytes) {
		//sanitize check fd
		if(fd<0||fd>15||file_descriptors[fd]==null|| fd >= this.file_descriptors.length)
		{
			return -1;
		}
		//sanitize buffer_address DAC BULLET PROOF
        //make sure num_bytes is acceptable (doesn't cause read too far, positive, etc) DAC BULLET PROOF
        int offset=0;     //offset to read into buffer
        byte[] buffer= new byte[4096];
        int toWrite=0;
        int remaining_bytes=num_bytes;
        int total_written=0;
        int read=0;
        int written=0;
        while(remaining_bytes>0){
        	toWrite=Math.min(4096,remaining_bytes);
                read=readVirtualMemory(buffer_address, buffer, 0, toWrite);  //make sure reads appropriate mem BULLET PROOF
                System.out.print("After read in handleWrite() readVirtualMemory returned:\t" + read + "\n");  //DAC DEBUG             
                written=file_descriptors[fd].write(buffer, 0, read);
                if(read!=written){
		    System.out.print("Read and written are different in writeHandle()\n");
                    return -1;
                }
                if(toWrite!=written){
		    System.out.print("Didn't write all bytes in writeHandle()\n");
                    return -1;
                }
                total_written+=written;
                remaining_bytes-=written;
                buffer_address+=written;
        }
        System.out.print("Total Written from Written:\t"+total_written+"\n");
        return total_written;  
                                    //better make sure all corne cases are dealt with  BULLET PROOF DAC  
    }

		
	/*
	 * close(): Frees a file descriptor
	 */
     private int handleClose(int fd){
        //sanitize check fd
        if(fd<0||fd>15){
	    return -1;
        }else{
	    file_descriptors[fd]=null;   
	}
        return 0;
     }

	/*
	 * unlink(): Frees a file descriptor and removes the file
	 */
	      private int handleUnlink(int filename_address){
        //sanitize check string address.

          String filename = readVirtualMemoryString(filename_address, 256);		  //DAC TO DO: make sure maxlength is appropriate(might need to be less than 256)
          //if null or empty return -1, corrupt file
			if (filename == null || filename.length() == 0) 
			{
				return -1;
			}
		  int i=searchNameFileDescriptor(filename);
          while(i>-1){ 
	      handleClose(i);
              i=searchNameFileDescriptor(filename);
	  }
          //close file descriptors which have this as name
            System.out.print("trying to remove: "+filename+"\n");
            boolean killed=ThreadedKernel.fileSystem.remove(filename);   //kill it!
            System.out.print("Killed succesfully = :"+ killed+"\n");
        return 0;
     }

    /*
     * handle Exec
     */
    private int handleExec(int filename_addr, int count, int arg_addr){   //DAC
        //sanitize addresses
        //get string from filename_adddress
        if(count<1){
	    System.out.print("Must have at least one argument\n");
            return -1;
        }
        String filename = readVirtualMemoryString(filename_addr, 256);  //DAC TO DO: make sure maxlength is appropriate(might need to be less than 256)
        //make sure filename is appropriate
        if(filename.length()<6){
	    System.out.print("Filename must be appropriate .coff file\n");
            return -1;
        }
        String testCoff=filename.substring(filename.length()-5,filename.length()-1);
        if(testCoff!=".coff"){
	    System.out.print("Filename must be appropriate .coff file\n");
            return -1;
        }        
        //get strings from arguments by iterating through "count times" and put in a string array
        //get address of each before getting string
        byte[] pointer_buff=new byte[4*count];
        String[] args=new String[count];
        readVirtualMemory(arg_addr, pointer_buff);   //transfer addresses of strings into pointer_buff
        int arg_num=0;
        while(count>0){
	    args[arg_num]= readVirtualMemoryString(Lib.bytesToInt(pointer_buff, arg_num*4), 256);  //DAC TO DO: make sure maxlength is appropriate(might need to be less than 256)
            count--;
            arg_num++;
        }
        //create a new process, make child/parent relationship, set new pid
        UserProcess child = UserProcess.newUserProcess();
        if(child==null){
	    return -1;
        }
        child.parent=this;
        this.children.add(child);
        UserKernel.assignPID(child);
        //execute new process -hooray
        Lib.assertTrue(execute(filename,args));  //execute child process
        return child.pid;
    }

       
	/**
	 * Handle the halt() system call. 
	 */
	private int handleHalt() {
           
	    if(this.isRoot){
		Machine.halt();

		Lib.assertNotReached("Machine.halt() did not halt machine!");
		return 0;
            }else
		return -1;
	}
        
    /*
     *handle Exit
     */ 
    private int handleExit(int status){     //DAC
        //do what pinky's does:
        //close all file descriptors
        //remove parent from all children
        //set status of parent.children.UserProcessBucket.status=status  where UserPRocessBucket represents this process
        //set parent.children.UserProcessBucket.UserProcess=null
        //set numActiveProcesses-- in kernel
        //set locked variable childFinished =true in parent process and wake up parent process to check all children
        //free memory associated with this process
	return status; 
    }
        
    private int handleJoin(int pid, int status_address){
        //check pid valid, check address (the usual)
        //scan children to see if child w/pid has finished (alternatively (and better) keep a linked list with free'd PIDs + status)
        //if yes, grab status from UserProcessBucket
        //if no, go back to sleep zzZZ
        //use writeVirtualMemory to write status as 4 bytes to status_address
        //other stuff?
        return -1;
    }
        

	private static final int
	syscallHalt = 0,
	syscallExit = 1,
	syscallExec = 2,
	syscallJoin = 3,
	syscallCreate = 4,
	syscallOpen = 5,
	syscallRead = 6,
	syscallWrite = 7,
	syscallClose = 8,
	syscallUnlink = 9;

	/**
	 * Handle a syscall exception. Called by <tt>handleException()</tt>. The
	 * <i>syscall</i> argument identifies which syscall the user executed:
	 *
	 * <table>
	 * <tr><td>syscall#</td><td>syscall prototype</td></tr>
	 * <tr><td>0</td><td><tt>void halt();</tt></td></tr>
	 * <tr><td>1</td><td><tt>void exit(int status);</tt></td></tr>
	 * <tr><td>2</td><td><tt>int  exec(char *name, int argc, char **argv);
	 * 								</tt></td></tr>
	 * <tr><td>3</td><td><tt>int  join(int pid, int *status);</tt></td></tr>
	 * <tr><td>4</td><td><tt>int  creat(char *name);</tt></td></tr>
	 * <tr><td>5</td><td><tt>int  open(char *name);</tt></td></tr>
	 * <tr><td>6</td><td><tt>int  read(int fd, char *buffer, int size);
	 *								</tt></td></tr>
	 * <tr><td>7</td><td><tt>int  write(int fd, char *buffer, int size);
	 *								</tt></td></tr>
	 * <tr><td>8</td><td><tt>int  close(int fd);</tt></td></tr>
	 * <tr><td>9</td><td><tt>int  unlink(char *name);</tt></td></tr>
	 * </table>
	 * 
	 * @param	syscall	the syscall number.
	 * @param	a0	the first syscall argument.
	 * @param	a1	the second syscall argument.
	 * @param	a2	the third syscall argument.
	 * @param	a3	the fourth syscall argument.
	 * @return	the value to be returned to the user.
	 */
	public int handleSyscall(int syscall, int a0, int a1, int a2, int a3) {
	int filename_addr=0;
        int fd=0;
	int num_bytes=0;
        int buffer_address=0;
        int count=0;
        int arg_address=0;

	switch (syscall) {
	case syscallHalt:
	    return handleHalt();

        case syscallCreate:
            filename_addr=a0; 
            //sanity check filename_addr
            return handleCreate(filename_addr);

	case syscallOpen:
	    filename_addr=a0;
            //sanity check filename_addr
            return handleOpen(filename_addr);
	case syscallRead:
            fd=a0;  //file descripter should be a0
            buffer_address = a1;  //buffer to read from 
            num_bytes = a2;  //number of bites to be written
            //check to see file descriptor valid
            //check to see if buffer is valid
            //ensure count is non-negative/valid
            return handleRead(fd, buffer_address, num_bytes);    //call hanlder that handles "read"  (make sure to add correct arguments)DAC             
            

        case syscallWrite:           //int write(int fileDescriptor, void *buffer, int count);
            fd=a0;  //file descripter should be a0
            buffer_address=a1;  //buffer to read from 
            num_bytes = a2;  //number of bites to be written
            //check to see file descriptor valid
            //check to see if buffer is valid
            //ensure count is non-negative/valid
            return handleWrite(fd, buffer_address, num_bytes);    //call hanlder that handles "write"  (make sure to add correct arguments)DAC  
         
        case syscallClose:
	    fd=a0;   //sanitize?
	    return handleClose(fd);
 
	case syscallUnlink:
	    fd=a0;
	    return handleUnlink(fd);
    
        case syscallExec:
            filename_addr=a0;
            count=a1;
            arg_address=a2;
            return handleExec(filename_addr, count, arg_address);  
 
        case syscallExit:
            int status=a0;
            return handleExit(status);
            
		
		/*case syscallExit:
			return handleExit(a0);
		case syscallExec:
			return handleExec(a0,a1,a2);
		case syscallJoin:
			return handleJoin(a0,a1);
          */


		default:
		    status=a0;  
			Lib.debug(dbgProcess, "Unknown syscall " + syscall);
			Lib.assertNotReached("Unknown system call!");    //remove me? DAC
                    return handleExit(status);  //DAC
		}
	//	return 0;  //remove me? DAC
	}

	/**
	 * Handle a user exception. Called by
	 * <tt>UserKernel.exceptionHandler()</tt>. The
	 * <i>cause</i> argument identifies which exception occurred; see the
	 * <tt>Processor.exceptionZZZ</tt> constants.
	 *
	 * @param	cause	the user exception that occurred.
	 */
	public void handleException(int cause) {
		Processor processor = Machine.processor();

		switch (cause) {
		case Processor.exceptionSyscall:
			int result = handleSyscall(processor.readRegister(Processor.regV0),
					processor.readRegister(Processor.regA0),
					processor.readRegister(Processor.regA1),
					processor.readRegister(Processor.regA2),
					processor.readRegister(Processor.regA3)
			);
			processor.writeRegister(Processor.regV0, result);
			processor.advancePC();
			break;				       

		default:
			Lib.debug(dbgProcess, "Unexpected exception: " +
					Processor.exceptionNames[cause]);
			Lib.assertNotReached("Unexpected exception");
		}
	}
    public int getPID(){    //DAC
        return this.pid;
    }   
    
    public void setPID(int pid){  //DAC
        this.pid=pid;
    }

	/** The program being run by this process. */
	protected Coff coff;

	/** This process's page table. */
	protected TranslationEntry[] pageTable;
	/** The number of contiguous pages occupied by the program. */
	protected int numPages;

	/** The number of pages in the program's stack. */
	protected final int stackPages = 8;

	private int initialPC, initialSP;
	private int argc, argv;

	private static final int pageSize = Processor.pageSize;
	private static final char dbgProcess = 'a';

	/////////////////////////////////////////////////
	//public for now: array of files associated with this process
	private final int NUM_FD = 16;    //number of files to support
	private OpenFile[] file_descriptors= new OpenFile[NUM_FD];
	

	//////////////////////////////////////////////////////////////

	public KThread myThread;


        private int pid;    //this processes PID
        private LinkedList<UserProcess> children = new LinkedList<UserProcess>();       //list of children of process
        private LinkedList<freeUserProcessBucket> freeChildren=new LinkedList<freeUserProcessBucket>();//list of free children ids+status (check for joins
        public boolean freeChlid=false;    //used for join().  When a child finishes, sets this to true and adds itself to freeChildren
        public Lock freeLock=new Lock();   //lock protects freeChild                   
        public Condition freeCondtion=new Condition(freeLock);  //sets process to sleep if freeChild==false and waiting on join()
        public UserProcess parent=null;  
        public boolean isRoot=false;    //only true for first process



  	public void testFileSystem(){
	    int flag=0;
            int read=0;
            int written=0;
            byte[] writeBuffer= new byte[4096];
            byte[] readBuffer= new byte[4096];

            OpenFile file = ThreadedKernel.fileSystem.open("blooper", true);
            if(file==null){
		System.out.print("Something wrong with fileSystem.open()\n");
            }
            flag=getNextFileDescriptor();
	    System.out.print("Flag value given by getNextFileDescriptor():\t" + flag + "\n");
            file_descriptors[flag]=file;
            if(file_descriptors[flag]==null){
		System.out.print("Something wrong with file_descriptors[flag]:\t has a null value\n");
            }else{
                for(int i=0; i<4096;i+=2){
		    writeBuffer[i]=98;
                }
                for(int i=1; i<4096;i+=2){
		    writeBuffer[i]=0;
                }
                written=file_descriptors[flag].write(writeBuffer, 0, 2000);
		//                written=file_descriptors[1].write(writeBuffer, 0, 40);   //try writing to stdout
                if(written<0){
		    System.out.print("Error writing to file\n");
                }
                System.out.print("Wrote to file," + written + " bytes of value "+writeBuffer[0]+"\n");  
		/*	System.out.print("Buffer Accessed, reading from file\n");
                //read=file_descriptors[flag].read(0, readBuffer, 0, 2000);
	                       System.out.print("Attempting to read from stdin\n");
		//read=file_descriptors[0].read(0, readBuffer, 0, 20);
		System.out.print("Read from file," + read + " bytes of value "+readBuffer[0]+"\n");  */

                
		    return;    
    	    }
	}  

                


 }

	





