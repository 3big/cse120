package nachos.userprog;

import nachos.machine.*;
import nachos.threads.*;
import nachos.userprog.*;
//using a linklist to keep track of all the free pages
import java.util.LinkedList;

/**
 * A kernel that can support multiple user processes.
 */
public class UserKernel extends ThreadedKernel {
	/**
	 * Allocate a new user kernel.
	 */
	public UserKernel() {
		super();
	}

	/**
	 * Initialize this kernel. Creates a synchronized console and sets the
	 * processor's exception handler.
	 */
	public void initialize(String[] args) {
		super.initialize(args);
                pageLock=new Lock();
		 pid_lock=new Lock();  //new pid lock  DAC 
		



                 
        //allocate list containing pages available for use
        for(int i = 0; i < Machine.processor().getNumPhysPages(); i++)
        {
                freePagesPool.add(i);
        }


		console = new SynchConsole(Machine.console());

		Machine.processor().setExceptionHandler(new Runnable() {
			public void run() { exceptionHandler(); }
		});
	}

	/**
	 * Test the console device.
	 */	
	public void selfTest() {
		super.selfTest();

		System.out.println("Testing the console device. Typed characters");
		System.out.println("will be echoed until q is typed.");

		char c;

		do {
			c = (char) console.readByte(true);
			console.writeByte(c);
		}
		while (c != 'q');

		System.out.println("");
	
	}

	/**
	 * Returns the current process.
	 *
	 * @return	the current process, or <tt>null</tt> if no process is current.
	 */
	public static UserProcess currentProcess() {
		if (!(KThread.currentThread() instanceof UThread))
			return null;

		return ((UThread) KThread.currentThread()).process;
	}

	/**
	 * The exception handler. This handler is called by the processor whenever
	 * a user instruction causes a processor exception.
	 *
	 * <p>
	 * When the exception handler is invoked, interrupts are enabled, and the
	 * processor's cause register contains an integer identifying the cause of
	 * the exception (see the <tt>exceptionZZZ</tt> constants in the
	 * <tt>Processor</tt> class). If the exception involves a bad virtual
	 * address (e.g. page fault, TLB miss, read-only, bus error, or address
	 * error), the processor's BadVAddr register identifies the virtual address
	 * that caused the exception.
	 */
	public void exceptionHandler() {
		Lib.assertTrue(KThread.currentThread() instanceof UThread);

		UserProcess process = ((UThread) KThread.currentThread()).process;
		int cause = Machine.processor().readRegister(Processor.regCause);
		process.handleException(cause);
	}

	/**
	 * Start running user programs, by creating a process and running a shell
	 * program in it. The name of the shell program it must run is returned by
	 * <tt>Machine.getShellProgramName()</tt>.
	 *
	 * @see	nachos.machine.Machine#getShellProgramName
	 */
	public void run() {
		super.run();

		UserProcess process = UserProcess.newUserProcess();
                process.isRoot=true;  //DAC

		String shellProgram = Machine.getShellProgramName();	
		//Lib.assertTrue(process.execute(shellProgram, new String[] { }));
		Lib.assertTrue(process.execute("mv.coff",new String[] {"mv","blooper","blooper2.txt" }));

		//free resourse of process, and wake up next process, wake all and let schdule handler
		//let the process know they did not get the pages. 
		KThread.currentThread().finish();
	}

	/**
	 * Terminate this kernel. Never returns.
	 */
	public void terminate() {
		super.terminate();
	}

        public static void assignPID(UserProcess process){    //DAC
        pid_lock.acquire();
	process.setPID(next_pid);
        next_pid++;
        pid_lock.release();
        return;
	}  
	
	//This method is used to allocate memory by removing pages that are currently
	//being used, and returning them to the process 
	//that needs it, if there is enough free pages, if not it sends OS a message and return pages back. 
	// pool of free pages is a linklist   
/* 	public int[] allocateMemory(int numOfPages)
	{
		// in array of pages, that will be given to processer if enough and available	
		int[] pages;
		pageLock.acquire();
		if (numOfPages > freePagesPool.size())
		{
			pageLock.release();
			//put process to sleep, process ends and wakes up. 
			KThread.currentThread().sleep();//maybe Uthread???
			return null;
		}

		pages = new int[numOfPages];
		for (int i = 0; i < pages.length; i++)
		{
			pages[i] = freePagesPool.getFirst();
		} 
		pageLock.release();
		return pages;           
	}

	// free the page by putting it back into our list 
	public void freeMemory(int pageToFree)
	{
		pageLock.acquire();
		if (! freePagesPool.contains(pageToFree) )
		{
			freePagesPool.add(pageToFree);
		}
		pageLock.release(); 
	} */


	/** Globally accessible reference to the synchronized console. */
	public static SynchConsole console;

	// dummy variables to make javac smarter
	private static Coff dummy1 = null;


	// page allocation fields
        //initialize lock for pages
        public static Lock pageLock;
	public static LinkedList<Integer> freePagesPool = new LinkedList<Integer>();
 
    //pid lock - prevent race conditions on pids
        public static Lock pid_lock;
    // next pid  - to be incremented with every new process
        public static int next_pid=0;
    //num active processes
    public static int numActiveProcesses=0;
	
}
